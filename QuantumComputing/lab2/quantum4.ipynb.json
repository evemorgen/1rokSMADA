{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import subprocess\n",
    "subprocess.call([\"pip\", \"install\", \"projectq\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from projectq import MainEngine\n",
    "\n",
    "# H = Hadamard gate, H|0> -> (|0> + |1>)/sqrt(2)\n",
    "#                    H|1> -> (|0> - |1>)/sqrt(2)\n",
    "# X = Pauli X (not) gate.  X|0> -> |1>\n",
    "#                          X|1> -> |0>\n",
    "# Z = Pauli Z gate  Z|0> -> |0>\n",
    "#                   Z|1> -> -|1>\n",
    "# Measure - perform measurment on a given qubit\n",
    "# All - performs operation on all qubits in given register\n",
    "from projectq.ops import H, Z, X, Measure, All\n",
    "\n",
    "# Loop - in quantum computing there is no such thing as classical loop. It just duplicates given operation n times\n",
    "# Control - acts like an if statement, code inside is executed based on qubit value passed as argument\n",
    "from projectq.meta import Loop, Compute, Uncompute, Control"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def magic_function(qubits, output):\n",
    "    # flip 0,1,3 qubits, so 0000 -> 1101, but 0010 -> 1111\n",
    "    with Compute(engine):\n",
    "        X | qubits[0]\n",
    "        X | qubits[1]\n",
    "        X | qubits[3]\n",
    "    # if all qubits in register are 1\n",
    "    with Control(engine, qubits):\n",
    "        # X(|0> - |1>)/sqrt(2) -> (|1> - |0>)/sqrt(2)\n",
    "        X | output\n",
    "    Uncompute(engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "results = []\n",
    "for _ in range(100):\n",
    "    engine = MainEngine()\n",
    "    # create quantum register with 4 qubits, all in state |0>\n",
    "    register = engine.allocate_qureg(4)\n",
    "    # allocate one qubit, starts with state |0> \n",
    "    function_out = engine.allocate_qubit()\n",
    "    \n",
    "    # apply hadamard gate to all qubits in register\n",
    "    # H|0> -> (|0> + |1>)/sqrt(2)\n",
    "    All(H) | register\n",
    "    \n",
    "    # X|0> -> |1>\n",
    "    X | function_out\n",
    "    # H|1> -> (|0> - |1>)/sqrt(2)\n",
    "    H | function_out\n",
    "    \n",
    "    with Loop(engine, 10):\n",
    "        magic_function(register, function_out)\n",
    "\n",
    "        with Compute(engine):\n",
    "            # H(|0> + |1>)/sqrt(2) -> |0>\n",
    "            All(H) | register\n",
    "            # X |0> -> |1>\n",
    "            All(X) | register\n",
    "\n",
    "        with Control(engine, register[0:-1]):\n",
    "            Z | register[-1]\n",
    "\n",
    "        Uncompute(engine)\n",
    "    \n",
    "    All(Measure) | register\n",
    "    Measure | function_out\n",
    "    engine.flush()\n",
    "    \n",
    "    results.append(tuple(int(qubit) for qubit in register))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import Counter\n",
    "counts = Counter(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plot\n",
    "y_pos = list(range(len(counts.keys())))\n",
    "plot.figure(figsize=(20,10))\n",
    "plot.bar(y_pos, counts.values())\n",
    "_ = plot.xticks(y_pos, list(counts.keys()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 0, 1, 0]\n",
      "True\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
