{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import all the stuff\n",
    "import matplotlib\n",
    "from sklearn import datasets, model_selection, metrics\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from pandas import DataFrame, crosstab\n",
    "from seaborn import heatmap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal length (cm)</th>\n",
       "      <th>sepal width (cm)</th>\n",
       "      <th>petal length (cm)</th>\n",
       "      <th>petal width (cm)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)\n",
       "0                5.1               3.5                1.4               0.2\n",
       "1                4.9               3.0                1.4               0.2\n",
       "2                4.7               3.2                1.3               0.2\n",
       "3                4.6               3.1                1.5               0.2\n",
       "4                5.0               3.6                1.4               0.2"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the Iris dataset \n",
    "raw_data = datasets.load_iris()\n",
    "irises = DataFrame(data=raw_data.data, columns=raw_data.feature_names)\n",
    "irises.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a training and test set using all features\n",
    "train_x, test_x, train_y, test_y = model_selection.train_test_split(irises, raw_data.target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit a decision tree classifier & Predict response for the test set. \n",
    "trained = DecisionTreeClassifier().fit(train_x, train_y)\n",
    "result = trained.predict(test_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Show the confusion matrix\n",
    "confusion_matrix = crosstab(result, test_y)\n",
    "heatmap(confusion_matrix, annot=True)\n",
    "matplotlib.pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "precision_score: 0.894275161588181, recall_score: 0.8947368421052632\n"
     ]
    }
   ],
   "source": [
    "# Show some performance metrics (precision and recall)\n",
    "prec = metrics.precision_score(test_y, result, average='weighted')\n",
    "rec = metrics.recall_score(test_y, result, average='weighted')\n",
    "print(f'precision_score: {prec}, recall_score: {rec}')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
